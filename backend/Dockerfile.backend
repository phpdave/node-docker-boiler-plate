# Use the official Node.js 20 image as the base image
FROM node:20
ARG SSH_PRIVATE_KEY

###########################
## IBMi ODBC SETUP START ##
###########################

# install unixodbc
RUN apt-get update && \
    ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev 

# install latest IBM i Acceess DB2 Driver
RUN curl https://public.dhe.ibm.com/software/ibmi/products/odbc/debs/dists/1.1.0/ibmi-acs-1.1.0.list | tee /etc/apt/sources.list.d/ibmi-acs-1.1.0.list && \
    apt-get update && \
    apt-get install -y ibm-iaccess 

COPY backend/odbc-driver-configs/odbcinst.ini /etc/odbcinst.ini
COPY backend/odbc-driver-configs/odbc.ini /etc/odbc.ini

##########################
## IBMi ODBC SETUP END  ##
##########################

# Install required packages, Python and build tools
RUN apt-get update && \
    apt-get install -y openssh-client git make gcc g++ python3 openssl 

# Set the PYTHON environment variable
ENV PYTHON=/usr/bin/python3

# Set up SSH
RUN mkdir /root/.ssh/ &&\
    echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa &&\
    chmod 600 /root/.ssh/id_rsa &&\
    touch /root/.ssh/known_hosts &&\
    ssh-keyscan github.com >> /root/.ssh/known_hosts

# Download public key for github.com
RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

# Set the working directory in the container
WORKDIR /usr/src/app/backend

RUN mkdir /wwww

# Copy package.json and package-lock.json to the working directory
COPY ./backend/package*.json ./

# Install the dependencies
RUN npm ci 

# Generate self-signed certificate for localhost
RUN printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth" > /tmp/openssl.cnf && \
    openssl req -x509 -out /etc/ssl/certs/localhost.crt -keyout /etc/ssl/private/localhost.key \
    -newkey rsa:2048 -nodes -sha256 \
    -subj '/CN=localhost' -extensions EXT -config /tmp/openssl.cnf && \
    rm /tmp/openssl.cnf

# Copy the certificate and private key to the container
RUN mkdir -p /etc/letsencrypt/live/my_app/
RUN cp /etc/ssl/certs/localhost.crt /etc/letsencrypt/live/my_app/cert.pem
RUN cp /etc/ssl/private/localhost.key /etc/letsencrypt/live/my_app/privkey.pem
RUN mkdir -p /etc/letsencrypt/live/local_reverse_proxy_my_app/
RUN cp /etc/ssl/certs/localhost.crt /etc/letsencrypt/live/local_reverse_proxy_my_app/cert.pem
RUN cp /etc/ssl/private/localhost.key /etc/letsencrypt/live/local_reverse_proxy_my_app/privkey.pem

# Copy the rest of the application code to the working directory
COPY ./backend/src .

# Expose the port your app will run on (e.g., 4201)
EXPOSE 4201

# Expose node.js debugging proto
EXPOSE 9229

# Start the application
# CMD ["npx", "nodemon", "--exec", "IS_LOCAL=1 NODE_ENV=development NODE_TLS_REJECT_UNAUTHORIZED=0 node --trace-warnings /usr/src/app/backend/dist/api/index.js "] < OLD
# CMD ["npx", "nodemon", "--exec", "IS_LOCAL=1 NODE_ENV=development NODE_TLS_REJECT_UNAUTHORIZED=0 node --inspect=0.0.0.0:9229 --trace-warnings /usr/src/app/backend/dist/api/index.js"]
# CMD npm run api-dev-docker

CMD npm install pm2 -g && pm2-runtime start ecosystem.config.js --env local --only backend-my-app