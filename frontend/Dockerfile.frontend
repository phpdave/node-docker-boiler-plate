# Use the official Node.js 20 image as the base image
FROM node:20-alpine
ARG SSH_PRIVATE_KEY

# Install required packages
RUN apk update && \
    apk add --no-cache openssh-client git

# Install Python and build tools
RUN apk add --no-cache make gcc g++ python3 openssl

# Set the PYTHON environment variable
ENV PYTHON=/usr/bin/python3

# Set up SSH
RUN mkdir /root/.ssh/ &&\
    echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa &&\
    chmod 600 /root/.ssh/id_rsa &&\
    touch /root/.ssh/known_hosts &&\
    ssh-keyscan github.com >> /root/.ssh/known_hosts

# Download public key for github.com
RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

# Set the working directory in the container
WORKDIR /usr/src/app/frontend

# Copy package.json and package-lock.json to the working directory
COPY ./src/package*.json ./

# Install the dependencies
# RUN npm ci 

# Generate self-signed certificate for localhost
RUN openssl req -x509 -out /etc/ssl/certs/localhost.crt -keyout /etc/ssl/private/localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

# Copy the certificate and private key to the container
RUN mkdir -p /etc/letsencrypt/live/my_app/
RUN cp /etc/ssl/certs/localhost.crt /etc/letsencrypt/live/my_app/cert.pem
RUN cp /etc/ssl/private/localhost.key /etc/letsencrypt/live/my_app/privkey.pem
RUN mkdir -p /etc/letsencrypt/live/local_reverse_proxy_my_app/
RUN cp /etc/ssl/certs/localhost.crt /etc/letsencrypt/live/local_reverse_proxy_my_app/cert.pem
RUN cp /etc/ssl/private/localhost.key /etc/letsencrypt/live/local_reverse_proxy_my_app/privkey.pem



# Copy the rest of the application code to the working directory
COPY ./src .

# Expose the port your app will run on (e.g., 4203)
EXPOSE 4203

# Start the application
# RUN npm run web-build

# start app
# CMD ["npm", "run", "web-dev-local"]

#Run in development mode
CMD npm run web-dev-local && npm install pm2 -g && pm2-runtime start ecosystem.config.js --env development --only my-app-web

# Build the next.js application and start app like production
# CMD npm run web-build && npm install pm2 -g && pm2-runtime start ecosystem.config.js --env production --only my-app-web